name: Recovery Builder - PBRP

on:
  workflow_dispatch:
    inputs:
      MANIFEST_BRANCH:
        description: 'PBRP Manifest Branch'
        required: true
        default: 'android-9.0'
        type: choice
        options:
        - android-14.0
        - android-12.1
        - android-11.0
        - android-10.0
        - android-9.0
        - android-8.1
        - android-7.1
        - android-6.0
      DEVICE_TREE:
        description: 'Custom Recovery Tree' # Your already made Device Tree for TWRP
        required: true
        default: 'https://github.com/vados-dev/sl8541e_cus_go'
      DEVICE_TREE_BRANCH:
        description: 'Your Custom Recovery Tree Branch' # Your Device Tree Branch, make sure it's right.
        required: true
        default: 'android-9.0'
      DEVICE_NAME:
        description: 'Specify your Device Codename' # As is, just like your PRODUCT_DEVICE in your device tree.
        required: true
        default: 'sl8541e_cus_go'
      MAKEFILE_NAME:
        description: 'MAKEFILE_NAME'
        required: true
        default: 'omni_sl8541e_cus_go'
      DEVICE_PATH:
        description: 'Specify your Device Path (Check the DEVICE_PATH in BoardConfig.mk)' # As is, just like your DEVICE_PATH in your BoardConfig.mk
        required: true
        default: 'device/sprd/sl8541e_cus_go'
      BUILD_TARGET:
        description: 'Specify your Build Target (choose "pbrp" instead of "recovery" for Android 11 or above)' # Pick among boot, recovery and vendor_boot
        required: true
        default: 'pbrp'
        type: choice
        options:
        - pbrp
        - boot
        - recovery
        - vendorboot
      LDCHECK:
        description: 'Use LDCHECK'
        required: true
        default: '0'
        type: boolean
      LDCHECKPATH:
        description: 'Path of blobs to check' # Use it know what kind of dependencies your missing for decryption blobs.
        required: false
        default: 'vendor/bin/mcDriverDaemon'
        
jobs:
  build:
    name: Build PBRP by ${{ github.actor }}
    runs-on: ubuntu-20.04
    if: github.event.repository.owner.id == github.event.sender.id
    env:
      GITHUB_TOKEN: ${{ secrets.amster }}
      LC_ALL: "C.UTF-8"
    permissions:
      contents: write
    steps:
    - name: Check Out
      uses: actions/checkout@v4

    - name: Display Inputs
      run: |
        echo "Displaying variables/inputs."
        echo "Manifest Branch: ${{ inputs.MANIFEST_BRANCH }}"
        echo "Device Tree: ${{ inputs.DEVICE_TREE }}"
        echo "Device Branch: ${{ inputs.DEVICE_TREE_BRANCH }}"
        echo "Build Target: ${{ inputs.BUILD_TARGET }}"

    - name: Cleanup
      uses: rokibhasansagar/slimhub_actions@main
      
    - name: Set Swap Space
      uses: pierotofy/set-swap-space@master
      with:
        swap-size-gb: 12

    - name: Check Manifest Branch
      run: |
        if [ ${{ inputs.MANIFEST_BRANCH }} == 'android-11.0' ] || [ ${{ inputs.MANIFEST_BRANCH }} == 'android-12.1' ]; then
            echo "CHECK_LEGACY_BRANCH=false" >> $GITHUB_ENV
        else
            echo "CHECK_LEGACY_BRANCH=true" >> $GITHUB_ENV
        fi

    - name: Prepare the environment
      run: |
        sudo apt update
        sudo apt -y upgrade
        sudo apt -y install gperf gcc-multilib gcc-10-multilib g++-multilib g++-10-multilib libc6-dev lib32ncurses5-dev x11proto-core-dev libx11-dev tree lib32z-dev libgl1-mesa-dev libxml2-utils xsltproc bc ccache lib32readline-dev lib32z1-dev liblz4-tool libncurses5-dev libsdl1.2-dev libwxgtk3.0-gtk3-dev libxml2 lzop pngcrush schedtool squashfs-tools imagemagick libbz2-dev lzma ncftp qemu-user-static libstdc++-10-dev libtinfo5 libgflags-dev libncurses5 python3

    - name: Install OpenJDK
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '8'

    - name: Install Git-Repo
      run: |
        mkdir ~/bin
        curl https://storage.googleapis.com/git-repo-downloads/repo > ~/bin/repo
        chmod a+x ~/bin/repo
        sudo ln -sf ~/bin/repo /usr/bin/repo

    - name: Initialize Repo
      run: |
        mkdir android-recovery
        cd android-recovery
        git config --global user.name "vados-dev"
        git config --global user.email "vados@vados.ru"
        repo init --depth=1 -u https://github.com/PitchBlackRecoveryProject/manifest_pb.git -b ${{ inputs.MANIFEST_BRANCH }}
        sed -i 's/android_system_core/android_system_core_old/' .repo/manifests/omni-aosp.xml ;
        sed -i 's/android_frameworks_base/android_frameworks_base_old/' .repo/manifests/omni-aosp.xml ;
        sed -i 's/android_frameworks_base/android_frameworks_base_old/g' .repo/manifests/remove-minimal.xml ;
        sed -i 's/android_frameworks_base/android_frameworks_base_old/' .repo/manifests/twrp-extras.xml ;
      id: pwd
    - name: Repo Sync
      run: |
        cd android-recovery
        repo sync -j$(nproc --all) --force-sync
      
    - name: Clone Device Tree
      run: |
        cd android-recovery
        git clone ${{ inputs.DEVICE_TREE }} -b ${{ inputs.DEVICE_TREE_BRANCH }} ./device_tree
        cd device_tree
        echo "COMMIT_ID=$(git rev-parse HEAD)" >> $GITHUB_ENV

    - name: Extracting variables from .mk file
      run: |
        cd android-recovery/device_tree
        # Initialize variables
        DEVICE_MAKEFILE=""
        DEVICE_DIRECTORY=""
        DEVICE_NAME=""
        # Loop through each .mk file in the current directory
        for file in *.mk; do
            # Extract variables using sed
            makefile=$(sed -n 's/^[[:space:]]*PRODUCT_NAME[[:space:]]*:=\s*\(.*\)/\1/p' "$file")
            brand=$(sed -n 's/^[[:space:]]*PRODUCT_BRAND[[:space:]]*:=\s*\(.*\)/\1/p' "$file")
            codename=$(sed -n 's/^[[:space:]]*PRODUCT_DEVICE[[:space:]]*:=\s*\(.*\)/\1/p' "$file")
            if [[ -n "$makefile" && -n "$brand" && -n "$codename" ]]; then
                DEVICE_MAKEFILE="$makefile"
                DEVICE_DIRECTORY="device/$brand"
                DEVICE_NAME="$codename"
                echo "DEVICE_MAKEFILE=${DEVICE_MAKEFILE}" >> $GITHUB_ENV
                echo "DEVICE_NAME=${DEVICE_NAME}" >> $GITHUB_ENV
                echo "DEVICE_DIRECTORY=${DEVICE_DIRECTORY}" >> $GITHUB_ENV
                break
            fi
        done
        # Navigate to the parent directory
        cd ../
        # Create the necessary directories
        echo "Creating directory: $DEVICE_DIRECTORY"
        mkdir -p "$DEVICE_DIRECTORY"
        # Move device_tree folder to device_directory and rename it to $DEVICE_NAME
        echo "Moving device_tree to $DEVICE_DIRECTORY/$DEVICE_NAME"
        mv device_tree "$DEVICE_DIRECTORY"/"$DEVICE_NAME"

    - name: Installing python2 for legacy builds
      if: env.CHECK_LEGACY_BRANCH == 'true'
      run: |
        sudo apt-get install python2 python-is-python2

    - name: Building PitchBlack
      run: |
        cd android-recovery
        source build/envsetup.sh
        export ALLOW_MISSING_DEPENDENCIES=true
        lunch ${{ env.DEVICE_MAKEFILE }}-eng && mka ${{ inputs.BUILD_TARGET }}

    - name: Check Build Makefile
      run: |
        cd android-recovery
        if [ -f out/target/product/${{ env.DEVICE_NAME }}/recovery.img ]; then
            echo "BUILD_TARGET_NAME=recovery" >> $GITHUB_ENV
        elif [ -f out/target/product/${{ env.DEVICE_NAME }}/boot.img ]; then
            echo "BUILD_TARGET_NAME=boot" >> $GITHUB_ENV
        else
            echo "BUILD_TARGET_NAME=vendor_boot" >> $GITHUB_ENV
        fi

    - name: Set Build Date # Output will be use in Release
      run: |
        echo "BUILD_DATE=$(date +%Y%m%d)" >> $GITHUB_ENV

    - name: Upload to Release
      uses: softprops/action-gh-release@master
      with:
        files: |
          android-recovery/out/target/product/${{ env.DEVICE_NAME }}/${{ env.BUILD_TARGET_NAME }}.img
          android-recovery/out/target/product/${{ env.DEVICE_NAME }}/PBRP*.zip
          android-recovery/out/target/product/${{ env.DEVICE_NAME }}/ramdisk-recovery.*
        name: Unofficial PBRP for ${{ env.DEVICE_NAME }} // ${{ env.BUILD_DATE }}
        tag_name: ${{ github.run_id }}
        body: |
          Build: ${{ inputs.MANIFEST_BRANCH }}
          Device: [Device Tree/Branch](${{ inputs.DEVICE_TREE }}/tree/${{ inputs.DEVICE_TREE_BRANCH }})
          Commit: Most recent [commit](${{ inputs.DEVICE_TREE }}/commit/${{ env.COMMIT_ID }}) during building.
        prerelease: true

    - name: Run LDCheck
      if: inputs.LDCHECK == 'true'
      run: |
        cd tools
        mv -n libneeds ${GITHUB_WORKSPACE}/android-recovery/out/target/product/${{ env.DEVICE_NAME }}/recovery/root/
        mv -n ldcheck ${GITHUB_WORKSPACE}/android-recovery/out/target/product/${{ env.DEVICE_NAME }}/recovery/root/
        cd ../android-recovery/out/target/product/${{ env.DEVICE_NAME }}/recovery/root
        python3 ldcheck -p system/lib64:vendor/lib64:system/lib:vendor/lib -d ${{ inputs.LDCHECK_PATH }}
        echo "Done checking missing dependencies. Review, and reconfigure your tree."
      continue-on-error: true
    
    - name: Cleanup Workspace
      run: |
        cd ${{ github.workspace }}
        rm -rf android-recovery
        df -h
